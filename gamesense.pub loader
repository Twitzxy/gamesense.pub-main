local repo = 'https://raw.githubusercontent.com/violin-suzutsuki/LinoriaLib/main/'
local Library = loadstring(game:HttpGet(repo .. 'Library.lua'))()
local ThemeManager = loadstring(game:HttpGet(repo .. 'addons/ThemeManager.lua'))()
local SaveManager = loadstring(game:HttpGet(repo .. 'addons/SaveManager.lua'))()
local Window = Library:CreateWindow({ Title = '                     $ Mad.lol | Beta $                     ', AutoShow = true, TabPadding = 15, MenuFadeTime = 0.2 })
local Tabs = { Main = Window:AddTab('Main'), ['UI Settings'] = Window:AddTab('UI Settings') }

local LocalPlayer = game:GetService('Players').LocalPlayer
local Players = game:GetService('Players')
local ReplicatedStorage = game:GetService('ReplicatedStorage')
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")

-- Main Tab
local GunMods = Tabs.Main:AddRightGroupbox('Gun Mods')
local KillAura = Tabs.Main:AddRightGroupbox('Combat')
local TargetingGroup = Tabs.Main:AddLeftGroupbox('Targeting')
local Target = Tabs.Main:AddLeftGroupbox('Target')

-- Variables
local lockedTarget = nil
local StickyAimEnabled = false
local TracerEnabled = false
local ViewTargetEnabled = false
local targetHitPart = "Head"
local targetToMouseTracer = true
local grabCheckEnabled = true
local koCheckEnabled = true
local friendCheckEnabled = false
local strafeEnabled = false
local strafeMode = "Orbit"
local strafeSpeed = 5
local strafeXOffset = 5
local predictMovementEnabled = false
local stompTargetEnabled = false
local lastPosition = nil
local oldPosition = nil
local Core = nil
local BodyVelocity = nil
local PredicTvalue = 1
local hiddenBulletsEnabled = false
local spectateStrafeEnabled = false
local AutoAmmoEnabled = false
local strafeWasEnabledBeforeAmmoBuy = false

local repo = 'https://raw.githubusercontent.com/violin-suzutsuki/LinoriaLib/main/'
local Library = loadstring(game:HttpGet(repo .. 'Library.lua'))()
local ThemeManager = loadstring(game:HttpGet(repo .. 'addons/ThemeManager.lua'))()
local SaveManager = loadstring(game:HttpGet(repo .. 'addons/SaveManager.lua'))()
local Window = Library:CreateWindow({ Title = '                     $ Mad.lol | Beta $                     ', AutoShow = true, TabPadding = 15, MenuFadeTime = 0.2 })
local Tabs = { Main = Window:AddTab('Main'), ['UI Settings'] = Window:AddTab('UI Settings') }

local LocalPlayer = game:GetService('Players').LocalPlayer
local Players = game:GetService('Players')
local ReplicatedStorage = game:GetService('ReplicatedStorage')
local RunService = game:GetService("RunService")
local UserInputService = game:GetService("UserInputService")
local TeleportService = game:GetService("TeleportService")
local Lighting = game:GetService("Lighting")
local GuiService = game:GetService("GuiService")

-- Main Tab
local GunMods = Tabs.Main:AddRightGroupbox('Gun Mods')
local KillAura = Tabs.Main:AddRightGroupbox('Combat')
local TargetingGroup = Tabs.Main:AddLeftGroupbox('Targeting')
local Target = Tabs.Main:AddLeftGroupbox('Target')
local VisualsGroup = Tabs.Main:AddRightGroupbox('Visuals')
local MovementGroup = Tabs.Main:AddLeftGroupbox('Movement')

-- Variables
local lockedTarget = nil
local StickyAimEnabled = false
local TracerEnabled = false
local ViewTargetEnabled = false
local targetHitPart = "Head"
local targetToMouseTracer = true
local grabCheckEnabled = true
local koCheckEnabled = true
local friendCheckEnabled = false
local strafeEnabled = false
local strafeMode = "Orbit"
local strafeSpeed = 5
local strafeXOffset = 5
local predictMovementEnabled = false
local stompTargetEnabled = false
local lastPosition = nil
local oldPosition = nil
local Core = nil
local BodyVelocity = nil
local PredicTvalue = 1
local hiddenBulletsEnabled = false
local spectateStrafeEnabled = false
local AutoAmmoEnabled = false
local strafeWasEnabledBeforeAmmoBuy = false
local CFrameSpeedKeyBind = false
local flyvariableshit = false
local chatSpamTick = tick()

-- Main Color
local MainColor = Color3.fromRGB(255, 102, 204)

-- Crosshair
local CrosshairHandler = loadstring(game:HttpGet('https://raw.githubusercontent.com/Hxckerskyy/miserycc.lua/main/crosshair.lua', true))() do
    getgenv().crosshair = {
        enabled = false,
        color = MainColor,
        mode = "mouse",
        width = 2.5,
        length = 10,
        radius = 11,
        spin = false,
        spin_speed = 150,
        resize = false,
        resize_speed = 5
    }
end

-- ESP (for indicators)
local ESPHandler = loadstring(game:HttpGet('https://raw.githubusercontent.com/Hxckerskyy/miserycc.lua/main/esp.lua', true))() do
    getgenv().esp = {
        Enabled = false,
        BoxEnabled = true,
        BoxColor = Color3.fromRGB(255, 255, 255),
        TextColor = Color3.fromRGB(255, 255, 255),
        TextLayout = {
            name = {enabled = true},
            health = {enabled = true},
            armor = {enabled = true},
            distance = {enabled = true},
            tool = {enabled = true}
        },
        BarLayout = {
            health = {
                enabled = true,
                color_full = MainColor,
                color_empty = Color3.fromRGB(255, 255, 255)
            },
            armor = {
                enabled = true,
                color_full = MainColor,
                color_empty = MainColor
            }
        },
        SkeletonEnabled = false,
        ChamsEnabled = false,
        ChamsInnerColor = MainColor,
        ChamsOuterColor = Color3.fromRGB(255, 255, 255)
    }
end

-- Target Circle
local YunDrawingApi = loadstring(game:HttpGet('https://raw.githubusercontent.com/Hxckerskyy/miserycc.lua/main/yunapi.lua', true))()
local TargetCircle = YunDrawingApi:New3DCircle() do
    TargetCircle.Visible = false
    TargetCircle.ZIndex = 1
    TargetCircle.Transparency = 1
    TargetCircle.Color = MainColor
    TargetCircle.Thickness = 1
    TargetCircle.Radius = 2
    TargetCircle.Rotation = Vector2.new(2, 0)
end

-- Line to target
local TracerLine = Drawing.new("Line") do
    TracerLine.Visible = false
    TracerLine.Color = MainColor
    TracerLine.Transparency = 1
    TracerLine.Thickness = 2
end

-- Backtrack
local BackTrackSettings = {
    Enabled = true,
    Material = 'ForceField',
    Color = MainColor,
    Delay = 0.1,
    Transparency = 0
}

-- Client Chams
local ClientChamsSettings = {
    Weapon = {
        Enabled = false,
        Material = Enum.Material.SmoothPlastic,
        Color = MainColor
    },
    Character = {
        Enabled = false,
        Material = Enum.Material.ForceField,
        Color = MainColor,
        Trail = false,
        Trail_Color = MainColor,
        Trail_Life = 3
    }
}

-- World Customization
local WorldSettings = {
    Enabled = false,
    Bars = false,
    BarsColor = MainColor
}

-- Bullet Tracers
local BulletTracerSettings = {
    Enabled = false,
    Magnitude = 12,
    Width = 1.7,
    Brightness = 5,
    Segments = 10,
    LightEmission = 10,
    Color = ColorSequence.new({ColorSequenceKeypoint.new(0, Color3.fromRGB(240, 175, 235)), ColorSequenceKeypoint.new(1, Color3.fromRGB(240, 175, 235))}),
    Speed = 3,
    Texture = 'Normal'
}

-- Hitsounds
getgenv().hitsounds = {
    ["Bubble"] = "rbxassetid://6534947588",
    ["Lazer"] = "rbxassetid://130791043",
    ["Pick"] = "rbxassetid://1347140027",
    ["Pop"] = "rbxassetid://198598793",
    ["Rust"] = "rbxassetid://1255040462",
    ["Sans"] = "rbxassetid://3188795283",
    ["Fart"] = "rbxassetid://130833677",
    ["Big"] = "rbxassetid://5332005053",
    ["Vine"] = "rbxassetid://5332680810",
    ["UwU"] = "rbxassetid://8679659744",
    ["Bruh"] = "rbxassetid://4578740568",
    ["Skeet"] = "rbxassetid://5633695679",
    ["Neverlose"] = "rbxassetid://6534948092",
    ["Fatality"] = "rbxassetid://6534947869",
    ["Bonk"] = "rbxassetid://5766898159",
    ["Minecraft"] = "rbxassetid://5869422451",
    ["Gamesense"] = "rbxassetid://4817809188",
    ["RIFK7"] = "rbxassetid://9102080552",
    ["Bamboo"] = "rbxassetid://3769434519",
    ["Crowbar"] = "rbxassetid://546410481",
    ["Weeb"] = "rbxassetid://6442965016",
    ["Beep"] = "rbxassetid://8177256015",
    ["Bambi"] = "rbxassetid://8437203821",
    ["Stone"] = "rbxassetid://3581383408",
    ["Old Fatality"] = "rbxassetid://6607142036",
    ["Click"] = "rbxassetid://8053704437",
    ["Ding"] = "rbxassetid://7149516994",
    ["Snow"] = "rbxassetid://6455527632",
    ["Laser"] = "rbxassetid://7837461331",
    ["Mario"] = "rbxassetid://2815207981",
    ["Steve"] = "rbxassetid://4965083997",
    ["Call of Duty"] = "rbxassetid://5952120301",
    ["Bat"] = "rbxassetid://3333907347",
    ["TF2 Critical"] = "rbxassetid://296102734",
    ["Saber"] = "rbxassetid://8415678813",
    ["Baimware"] = "rbxassetid://3124331820",
    ["Osu"] = "rbxassetid://7149255551",
    ["TF2"] = "rbxassetid://2868331684",
    ["Slime"] = "rbxassetid://6916371803",
    ["Among Us"] = "rbxassetid://5700183626",
    ["One"] = "rbxassetid://7380502345"
}
getgenv().selectedHitsound = "Bubble"
getgenv().hitsoundEnabled = false
getgenv().hitsoundVolume = 1

-- Tracers
local tracer = Drawing.new("Line")
tracer.Visible = false
tracer.Thickness = 1
tracer.Color = Color3.fromRGB(255, 255, 255)

local killAuraTracer = Drawing.new("Line")
killAuraTracer.Visible = false
killAuraTracer.Thickness = 1
killAuraTracer.Color = Color3.fromRGB(255, 0, 0)

-- Indicators
local MenuGroup = Tabs['UI Settings']:AddLeftGroupbox('Menu')
MenuGroup:AddButton('Unload', function() Library:Unload() end)
MenuGroup:AddLabel('Menu bind'):AddKeyPicker('MenuKeybind', { Default = 'End', NoUI = true, Text = 'Menu keybind' }) 

Library.ToggleKeybind = Options.MenuKeybind

ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)

SaveManager:IgnoreThemeSettings() 
SaveManager:SetIgnoreIndexes({ 'MenuKeybind' }) 

ThemeManager:SetFolder('MyScriptHub')
SaveManager:SetFolder('MyScriptHub/specific-game')

SaveManager:BuildConfigSection(Tabs['UI Settings']) 
ThemeManager:ApplyToTab(Tabs['UI Settings'])

-- Functions
local function ToggleTrail(Bool)
    for i,v in pairs(LocalPlayer.Character:GetChildren()) do
        if v:IsA("BasePart") then
            if Bool then
                local BlaBla = Instance.new("Trail", v)
                BlaBla.Texture = "rbxassetid://1390780157"
                BlaBla.Parent = v
                local Pointer1 = Instance.new("Attachment", v)
                Pointer1.Name = "Pointer1"
                local Pointer2 = Instance.new("Attachment", LocalPlayer.Character.HumanoidRootPart)
                Pointer2.Name = "Pointer2"
                BlaBla.Attachment0 = Pointer1
                BlaBla.Attachment1 = Pointer2
                BlaBla.Color = ColorSequence.new({ColorSequenceKeypoint.new(0, ClientChamsSettings.Character.Trail_Color), ColorSequenceKeypoint.new(1, ClientChamsSettings.Character.Trail_Color)})
                BlaBla.Lifetime = ClientChamsSettings.Character.Trail_Life
                BlaBla.Name = "BlaBla"
            else
                for _, child in ipairs(v:GetChildren()) do
                    if child:IsA("Trail") and child.Name == 'BlaBla' then
                        child:Destroy()
                    end
                end
            end
        end
    end
end

local function playHitsound()
    if getgenv().hitsoundEnabled then
        local sound = Instance.new("Sound")
        sound.SoundId = getgenv().hitsounds[getgenv().selectedHitsound]
        sound.Volume = getgenv().hitsoundVolume
        sound.Parent = workspace
        sound:Play()
        sound.Ended:Connect(function()
            sound:Destroy()
        end)
    end
end

local function predictPosition(targetRoot, predictionMultiplier)
    if not targetRoot then return targetRoot.Position end
    if targetRoot.Velocity.Magnitude > 700 then
        return targetRoot.Position
    end
    return targetRoot.Position + (targetRoot.Velocity * predictionMultiplier)
end

local function BacktrackPlayer(player)
    if player.Character and player.Character:FindFirstChild("HumanoidRootPart") then
        player.Character.Archivable = true
        local Cloned = player.Character:Clone()
        Cloned.Name = "Player Clone"
        
        for _, v in ipairs(Cloned:GetChildren()) do
            if v:IsA("BasePart") and v.Name ~= "HumanoidRootPart" then
                v.CanCollide = false
                v.Anchored = true
                v.Material = BackTrackSettings.Material
                v.Color = BackTrackSettings.Color
                v.Transparency = BackTrackSettings.Transparency
            else
                v:Destroy()
            end
        end
        
        if Cloned:FindFirstChild("Head") and Cloned.Head:FindFirstChild("face") then
            Cloned.Head.face:Destroy()
        end
        
        Cloned.Parent = workspace
        wait(BackTrackSettings.Delay)
        Cloned:Destroy()
    end
end

local function CFrameFly()
    if flyvariableshit then
        local speed = 5 * 50
        local velocity = Vector3.new(0, 0.1, 0)
        
        if UserInputService:IsKeyDown(Enum.KeyCode.W) then
            velocity = velocity + (workspace.CurrentCamera.CFrame.lookVector * speed)
        end
        if UserInputService:IsKeyDown(Enum.KeyCode.A) then
            velocity = velocity + (workspace.CurrentCamera.CFrame.rightVector * -speed)
        end
        if UserInputService:IsKeyDown(Enum.KeyCode.S) then
            velocity = velocity + (workspace.CurrentCamera.CFrame.lookVector * -speed)
        end
        if UserInputService:IsKeyDown(Enum.KeyCode.D) then
            velocity = velocity + (workspace.CurrentCamera.CFrame.rightVector * speed)
        end
        
        LocalPlayer.Character.HumanoidRootPart.Velocity = velocity
        LocalPlayer.Character.Humanoid:ChangeState("Freefall")
    else
        LocalPlayer.Character.Humanoid:ChangeState("Landing")
    end
end

local function CFrameSpeed()
    if CFrameSpeedKeyBind and LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("Humanoid") then
        local humanoid = LocalPlayer.Character.Humanoid
        if humanoid.MoveDirection.Magnitude > 0 then
            for i = 1, 3 do
                LocalPlayer.Character:TranslateBy(humanoid.MoveDirection)
            end
        end
    end
end

-- UI Elements
-- Crosshair
VisualsGroup:AddToggle("CrosshairToggle", {
    Text = "Crosshair",
    Default = false,
    Callback = function(Value)
        getgenv().crosshair.enabled = Value
    end
})

-- Target Line
VisualsGroup:AddToggle("TargetLine", {
    Text = "Target Line",
    Default = false,
    Callback = function(Value)
        TracerLine.Visible = Value
    end
})

-- BackTrack
VisualsGroup:AddToggle("BackTrack", {
    Text = "BackTrack",
    Default = true,
    Callback = function(Value)
        BackTrackSettings.Enabled = Value
    end
})

-- Character Chams
VisualsGroup:AddToggle("CharacterChams", {
    Text = "Character Chams",
    Default = false,
    Callback = function(Value)
        ClientChamsSettings.Character.Enabled = Value
    end
})

-- Character Trail
VisualsGroup:AddToggle("CharacterTrail", {
    Text = "Character Trail",
    Default = false,
    Callback = function(Value)
        ClientChamsSettings.Character.Trail = Value
        if Value then
            ToggleTrail(true)
        else
            ToggleTrail(false)
        end
    end
})

-- Weapon Chams
GunMods:AddToggle("WeaponChams", {
    Text = "Weapon Chams",
    Default = false,
    Callback = function(Value)
        ClientChamsSettings.Weapon.Enabled = Value
    end
})

-- World Customization
VisualsGroup:AddToggle("WorldCustomization", {
    Text = "World Customization",
    Default = false,
    Callback = function(Value)
        WorldSettings.Enabled = Value
    end
})

VisualsGroup:AddColorPicker("WorldColor", {
    Text = "World Color",
    Default = MainColor,
    Callback = function(Value)
        WorldSettings.BarsColor = Value
    end
})

-- CFrame Speed
MovementGroup:AddToggle("CFrameSpeed", {
    Text = "CFrame Speed",
    Default = false,
    Callback = function(Value)
        CFrameSpeedKeyBind = Value
    end
}):AddKeyPicker("CFrameSpeedKeybind", {
    Default = "X",
    NoUI = false,
    Text = "CFrame Speed",
    Mode = "Toggle"
})

-- Fly
MovementGroup:AddToggle("FlyToggle", {
    Text = "Fly",
    Default = false,
    Callback = function(Value)
        flyvariableshit = Value
    end
}):AddKeyPicker("FlyKeybind", {
    Default = "X",
    NoUI = false,
    Text = "Fly",
    Mode = "Toggle"
})

-- Main render loop
RunService.RenderStepped:Connect(function()
    -- Crosshair
    if getgenv().crosshair.enabled then
        CrosshairHandler:Update()
    end
    
    -- Target Line
    if TracerLine.Visible and lockedTarget and lockedTarget.Character then
        local targetPart = lockedTarget.Character:FindFirstChild(targetHitPart)
        if targetPart then
            local camera = workspace.CurrentCamera
            local targetPos, onScreen = camera:WorldToViewportPoint(targetPart.Position)
            local mousePos = UserInputService:GetMouseLocation()
            
            if onScreen then
                TracerLine.From = Vector2.new(targetPos.X, targetPos.Y)
                TracerLine.To = Vector2.new(mousePos.X, mousePos.Y)
            end
        end
    end
    
    -- Target Circle
    if lockedTarget and lockedTarget.Character then
        TargetCircle.Visible = true
        TargetCircle.Position = lockedTarget.Character.UpperTorso and lockedTarget.Character.UpperTorso.Position
    else
        TargetCircle.Visible = false
    end
    
    -- Client Chams
    if LocalPlayer.Character then
        -- Weapon Chams
        local tool = LocalPlayer.Character:FindFirstChildOfClass("Tool")
        if tool and ClientChamsSettings.Weapon.Enabled then
            for _, part in pairs(tool:GetDescendants()) do
                if part:IsA("BasePart") or part:IsA("MeshPart") then
                    part.Material = ClientChamsSettings.Weapon.Material
                    part.Color = ClientChamsSettings.Weapon.Color
                    if part:IsA("MeshPart") then
                        part.TextureID = ""
                    end
                end
            end
        end
        
        -- Character Chams
        if ClientChamsSettings.Character.Enabled then
            for _, part in pairs(LocalPlayer.Character:GetDescendants()) do
                if (part:IsA("BasePart") or part:IsA("MeshPart")) and not part.Parent:IsA("Tool") then
                    part.Material = ClientChamsSettings.Character.Material
                    part.Color = ClientChamsSettings.Character.Color
                    if part:IsA("MeshPart") then
                        part.TextureID = ""
                    end
                end
            end
        end
    end
    
    -- World Customization
    if WorldSettings.Enabled then
        Lighting.ColorCorrection.TintColor = WorldSettings.BarsColor
        
        local Bars = LocalPlayer.PlayerGui:FindFirstChild('MainScreenGui') and LocalPlayer.PlayerGui.MainScreenGui:FindFirstChild('Bar')
        if Bars and WorldSettings.Bars then
            Bars.Energy.bar.BackgroundColor3 = WorldSettings.BarsColor
            Bars.Armor.bar.BackgroundColor3 = WorldSettings.BarsColor
            Bars.HP.bar.BackgroundColor3 = WorldSettings.BarsColor
            Bars.Armor.firebar.BackgroundColor3 = WorldSettings.BarsColor
        end
    end
    
    -- CFrame Fly/Speed
    CFrameFly()
    CFrameSpeed()
    
    -- BackTrack
    if BackTrackSettings.Enabled and lockedTarget then
        BacktrackPlayer(lockedTarget)
    end
end)

-- Hitsounds
getgenv().hitsounds = {
    ["Bubble"] = "rbxassetid://6534947588",
    ["Lazer"] = "rbxassetid://130791043",
    ["Pick"] = "rbxassetid://1347140027",
    ["Pop"] = "rbxassetid://198598793",
    ["Rust"] = "rbxassetid://1255040462",
    ["Sans"] = "rbxassetid://3188795283",
    ["Fart"] = "rbxassetid://130833677",
    ["Big"] = "rbxassetid://5332005053",
    ["Vine"] = "rbxassetid://5332680810",
    ["UwU"] = "rbxassetid://8679659744",
    ["Bruh"] = "rbxassetid://4578740568",
    ["Skeet"] = "rbxassetid://5633695679",
    ["Neverlose"] = "rbxassetid://6534948092",
    ["Fatality"] = "rbxassetid://6534947869",
    ["Bonk"] = "rbxassetid://5766898159",
    ["Minecraft"] = "rbxassetid://5869422451",
    ["Gamesense"] = "rbxassetid://4817809188",
    ["RIFK7"] = "rbxassetid://9102080552",
    ["Bamboo"] = "rbxassetid://3769434519",
    ["Crowbar"] = "rbxassetid://546410481",
    ["Weeb"] = "rbxassetid://6442965016",
    ["Beep"] = "rbxassetid://8177256015",
    ["Bambi"] = "rbxassetid://8437203821",
    ["Stone"] = "rbxassetid://3581383408",
    ["Old Fatality"] = "rbxassetid://6607142036",
    ["Click"] = "rbxassetid://8053704437",
    ["Ding"] = "rbxassetid://7149516994",
    ["Snow"] = "rbxassetid://6455527632",
    ["Laser"] = "rbxassetid://7837461331",
    ["Mario"] = "rbxassetid://2815207981",
    ["Steve"] = "rbxassetid://4965083997",
    ["Call of Duty"] = "rbxassetid://5952120301",
    ["Bat"] = "rbxassetid://3333907347",
    ["TF2 Critical"] = "rbxassetid://296102734",
    ["Saber"] = "rbxassetid://8415678813",
    ["Baimware"] = "rbxassetid://3124331820",
    ["Osu"] = "rbxassetid://7149255551",
    ["TF2"] = "rbxassetid://2868331684",
    ["Slime"] = "rbxassetid://6916371803",
    ["Among Us"] = "rbxassetid://5700183626",
    ["One"] = "rbxassetid://7380502345"
}
getgenv().selectedHitsound = "Bubble"
getgenv().hitsoundEnabled = false
getgenv().hitsoundVolume = 1

function playHitsound()
    if getgenv().hitsoundEnabled then
        local sound = Instance.new("Sound")
        sound.SoundId = getgenv().hitsounds[getgenv().selectedHitsound]
        sound.Volume = getgenv().hitsoundVolume
        sound.Parent = workspace
        sound:Play()
        sound.Ended:Connect(function()
            sound:Destroy()
        end)
    end
end

-- Tracers
local tracer = Drawing.new("Line")
tracer.Visible = false
tracer.Thickness = 1
tracer.Color = Color3.fromRGB(255, 255, 255)

local killAuraTracer = Drawing.new("Line")
killAuraTracer.Visible = false
killAuraTracer.Thickness = 1
killAuraTracer.Color = Color3.fromRGB(255, 0, 0)

function predictPosition(targetRoot, predictionMultiplier)
    if not targetRoot then return targetRoot.Position end
    if targetRoot.Velocity.Magnitude > 700 then
        return targetRoot.Position
    end
    return targetRoot.Position + (targetRoot.Velocity * predictionMultiplier)
end

-- Sticky Aim
TargetingGroup:AddToggle("StickyAim", {
    Text = "Sticky Aim",
    Default = false,
    Callback = function(Value)
        StickyAimEnabled = Value
        if not Value then
            lockedTarget = nil
            workspace.CurrentCamera.CameraSubject = LocalPlayer.Character:FindFirstChild("Humanoid")
            tracer.Visible = false
        end
    end
}):AddKeyPicker("StickyAimKeybind", {
    Default = "C",
    NoUI = false,
    Text = "Sticky Aim",
    Mode = "Toggle",
    Callback = function()
        if UserInputService:GetFocusedTextBox() then return end
        if lockedTarget then
            lockedTarget = nil
            workspace.CurrentCamera.CameraSubject = LocalPlayer.Character:FindFirstChild("Humanoid")
            tracer.Visible = false
        else
            local camera = workspace.CurrentCamera
            local mouseLocation = UserInputService:GetMouseLocation()
            local closestTarget, closestDistance = nil, math.huge

            for _, otherPlayer in ipairs(Players:GetPlayers()) do
                if otherPlayer ~= LocalPlayer and otherPlayer.Character and otherPlayer.Character:FindFirstChild(targetHitPart) then
                    local bodyEffects = otherPlayer.Character:FindFirstChild("BodyEffects")
                    local isKO = bodyEffects and bodyEffects:FindFirstChild("K.O") and bodyEffects["K.O"].Value
                    local isGrabbed = otherPlayer.Character:FindFirstChild("GRABBING_CONSTRAINT")

                    if (not grabCheckEnabled or not isGrabbed) and
                       (not friendCheckEnabled or not LocalPlayer:IsFriendsWith(otherPlayer.UserId)) then

                        local targetPart = otherPlayer.Character[targetHitPart]
                        local screenPosition, onScreen = camera:WorldToViewportPoint(targetPart.Position)
                        if onScreen then
                            local distance = (Vector2.new(screenPosition.X, screenPosition.Y) - mouseLocation).Magnitude
                            if distance < closestDistance then
                                closestTarget = otherPlayer
                                closestDistance = distance
                            end
                        end
                    end
                end
            end

            if closestTarget then
                lockedTarget = closestTarget
            end
        end
    end
})

-- Spectate
local maddieplsnomad = false
TargetingGroup:AddToggle("ViewTarget", {
    Text = "spectate",
    Default = false,
    Callback = function(Value)
        maddieplsnomad = Value
        if not Value then
            ViewTargetEnabled = false
            workspace.CurrentCamera.CameraSubject = LocalPlayer.Character:FindFirstChild("Humanoid")
        end
    end
}):AddKeyPicker("ViewTargetKeybind", {
    Default = "B",
    NoUI = false,
    Text = "spectate",
    Mode = "Toggle",
    Callback = function()
        if not maddieplsnomad or UserInputService:GetFocusedTextBox() then return end
        ViewTargetEnabled = not ViewTargetEnabled
        if ViewTargetEnabled and lockedTarget then
            workspace.CurrentCamera.CameraSubject = lockedTarget.Character
        else
            workspace.CurrentCamera.CameraSubject = LocalPlayer.Character:FindFirstChild("Humanoid")
        end
    end
})

-- Hit Part Selection
TargetingGroup:AddDropdown("hp", {
    Text = "Hit Part",
    Values = {"Head", "HumanoidRootPart", "UpperTorso", "Left Arm", "Right Arm", "Left Leg", "Right Leg"},
    Default = "Head",
    Callback = function(Value)
        targetHitPart = Value
    end
})

-- Target Strafe
Target:AddToggle("StrafeToggle", {
    Text = "Target Strafe",
    Default = false,
    Callback = function(Value)
        strafeEnabled = Value
        if not Value then
            if Core then
                Core:Destroy()
                Core = nil
            end
            if BodyVelocity then
                BodyVelocity:Destroy()
                BodyVelocity = nil
            end
            if oldPosition then
                LocalPlayer.Character.HumanoidRootPart.CFrame = oldPosition
                oldPosition = nil
            end
            workspace.CurrentCamera.CameraSubject = LocalPlayer.Character:FindFirstChild("Humanoid")
        end
    end
}):AddKeyPicker("StrafeKeybind", {
    Default = "N",
    NoUI = false,
    Text = "Strafe",
    Mode = "Toggle",
    Callback = function()
        if UserInputService:GetFocusedTextBox() then return end
        strafeEnabled = not strafeEnabled
        if not strafeEnabled then
            if Core then
                Core:Destroy()
                Core = nil
            end
            if BodyVelocity then
                BodyVelocity:Destroy()
                BodyVelocity = nil
            end
            if oldPosition then
                LocalPlayer.Character.HumanoidRootPart.CFrame = oldPosition
                oldPosition = nil
            end
            workspace.CurrentCamera.CameraSubject = LocalPlayer.Character:FindFirstChild("Humanoid")
        end
    end
})

-- Spectate Strafe
Target:AddToggle("SpectateStrafe", {
    Text = "Spectate Strafe",
    Default = false,
    Callback = function(Value)
        spectateStrafeEnabled = Value
        if not Value then
            workspace.CurrentCamera.CameraSubject = LocalPlayer.Character:FindFirstChild("Humanoid")
        end
    end
})

-- Strafe Mode
Target:AddDropdown("StrafeMode", {
    Text = "Strafe Mode",
    Values = {"Orbit", "Random"},
    Default = "Orbit",
    Callback = function(Value)
        strafeMode = Value
    end
})

-- Strafe Speed
Target:AddSlider("StrafeSpeed", {
    Text = "Speed units",
    Default = 5,
    Min = 1,
    Max = 20,
    Rounding = 1,
    Callback = function(Value)
        strafeSpeed = Value
    end
})

-- Strafe Offset
Target:AddSlider("StrafeXOffset", {
    Text = "z offset",
    Default = 5,
    Min = 1,
    Max = 20,
    Rounding = 1,
    Callback = function(Value)
        strafeXOffset = Value
    end
})

-- Movement Prediction
Target:AddToggle("PredictMovement", {
    Text = "predict movement",
    Default = false,
    Callback = function(Value)
        predictMovementEnabled = Value
    end
})

-- Prediction Distance
Target:AddSlider("StrafePredictionDistance", {
    Text = "movement prediction",
    Default = 0.3,
    Min = 0.1,
    Max = 10,
    Rounding = 1,
    Callback = function(Value)
        PredicTvalue = Value
    end
})

-- Stomp Target
TargetingGroup:AddToggle("StompTarget", {
    Text = "Stomp Target",
    Default = false,
    Callback = function(Value)
        stompTargetEnabled = Value
    end
})

-- Hidden Bullets
TargetingGroup:AddToggle("HiddenBullets", {
    Text = "invisible bullets",
    Default = false,
    Callback = function(Value)
        hiddenBulletsEnabled = Value
    end
})

-- Auto Ammo
TargetingGroup:AddToggle("AutoAmmo", {
    Text = "Auto Ammo",
    Default = false,
    Callback = function(Value)
        AutoAmmoEnabled = Value
    end
})

-- Kill Say
local killSayEnabled = false
local killSayMessages = {
    "mad.lol is a free script and u die to it..", 
    "Must be hard without mad.lol 💔", 
    "Why aim when mad.lol does it for you?",
    "Bros not on mad.lol already 😂",
    "Cant be me icl",
    "cant win a hvh? maybe try /madlolhvh",
    "if u wanna win hop in /madlolhvh",
    "hey come on if u cant win get mad . lol",
    "how to win a hvh? step 1 get mad . lol"
}

TargetingGroup:AddToggle("killsay", { 
    Text = "Kill Say", 
    Default = false,
    Callback = function(Value)
        killSayEnabled = Value
    end
})

-- Rapid Fire
local RapidFireEnabled = false
local hyperFireEnabled = false
local modifiedTools = {}

local function rapidfire(tool)
    if not tool or not tool:FindFirstChild("GunScript") or modifiedTools[tool] then return end

    for _, v in ipairs(getconnections(tool.Activated)) do
        local funcinfo = debug.getinfo(v.Function)
        for i = 1, funcinfo.nups do
            local c, n = debug.getupvalue(v.Function, i)
            if type(c) == "number" then
                debug.setupvalue(v.Function, i, 0.0000000000001)
            end
        end
    end

    modifiedTools[tool] = true
end

local function onCharacterAdded(character)
    for _, tool in ipairs(character:GetChildren()) do
        if tool:IsA("Tool") and tool:FindFirstChild("Handle") then
            rapidfire(tool)
        end
    end

    character.ChildAdded:Connect(function(child)
        if child:IsA("Tool") and child:FindFirstChild("Handle") then
            rapidfire(child)
        end
    end)
end

if LocalPlayer.Character then
    onCharacterAdded(LocalPlayer.Character)
end

LocalPlayer.CharacterAdded:Connect(onCharacterAdded)

GunMods:AddToggle("RapidFireToggle", {
    Text = "Rapid Fire",
    Default = false,
    Callback = function(Value)
        RapidFireEnabled = Value
        if Value then
            modifiedTools = {}
            if LocalPlayer.Character then
                onCharacterAdded(LocalPlayer.Character)
            end
        end
    end
})

-- Hyper Fire
local function updateHyperFire()
    for _, obj in ipairs(game:GetDescendants()) do
        if obj.Name == "ToleranceCooldown" and obj:IsA("ValueBase") then
            obj.Value = 0 
        end
    end
end

GunMods:AddToggle("HyperFireToggle", {
    Text = "Rapid Fire v2",
    Default = false,
    Callback = function(Value)
        hyperFireEnabled = Value
        updateHyperFire()
    end
})

game.DescendantAdded:Connect(function(obj)
    if obj.Name == "ToleranceCooldown" and obj:IsA("ValueBase") then
        obj.Value = hyperFireEnabled and 0 or 3
    end
end)

-- Hitbox Expander
local HBE = Tabs.Main:AddRightGroupbox('HBE')
local size = 10
local hitboxColor = Color3.new(0, 1, 1)
local visualizeHitbox = false
local hitboxExpanderEnabled = false

HBE:AddToggle('HitboxExpanderToggle', {
    Text = 'Hitbox Expander',
    Default = false,
    Callback = function(state)
        hitboxExpanderEnabled = state
        if not state then
            for _, Player in pairs(Players:GetPlayers()) do
                if Player ~= LocalPlayer and Player.Character then
                    resetCharacter(Player.Character)
                end
            end
        end
    end,
}):AddKeyPicker("FlightKeybindPicker", {
    Default = "L",
    Text = "Hitbox",
    Mode = "Toggle",
    Callback = function(state)
        if UserInputService:GetFocusedTextBox() then return end
        hitboxExpanderEnabled = state
        if not state then
            for _, Player in pairs(Players:GetPlayers()) do
                if Player ~= LocalPlayer and Player.Character then
                    resetCharacter(Player.Character)
                end
            end
        end
    end
})

HBE:AddSlider('HitboxSizeSlider', {
    Text = 'Hitbox Size',
    Default = 10,
    Min = 10,
    Max = 50,
    Rounding = 0,
    Callback = function(value)
        size = value
    end,
})

HBE:AddToggle('VisualizerToggle', {
    Text = 'Visualize',
    Default = false,
    Callback = function(state)
        visualizeHitbox = state
        if not state then
            for _, Player in pairs(Players:GetPlayers()) do
                if Player ~= LocalPlayer and Player.Character then
                    removeVisuals(Player.Character)
                end
            end
        end
    end,
}):AddColorPicker('HitboxColorPicker', {
    Text = 'Hitbox Color',
    Default = Color3.new(0, 1, 1),
    Callback = function(color)
        hitboxColor = color
    end,
})

local function removeVisuals(Character)
    if not Character then return end
    local HRP = Character:FindFirstChild("HumanoidRootPart")
    if HRP then
        local outline = HRP:FindFirstChild("HitboxOutline")
        if outline then outline:Destroy() end
        local glow = HRP:FindFirstChild("HitboxGlow")
        if glow then glow:Destroy() end
    end
end

local function resetCharacter(Character)
    if not Character then return end
    local HRP = Character:FindFirstChild("HumanoidRootPart")
    if HRP then
        HRP.Size = Vector3.new(2, 1, 2)
        HRP.Transparency = 1
        HRP.CanCollide = true
        removeVisuals(Character)
    end
end

local function handleCharacter(Character)
    if not Character or not hitboxExpanderEnabled then
        resetCharacter(Character)
        return
    end
    local HRP = Character:FindFirstChild("HumanoidRootPart") or Character:WaitForChild("HumanoidRootPart", 5)
    if not HRP then return end

    HRP.Size = Vector3.new(size, size, size)
    HRP.Transparency = 1
    HRP.CanCollide = false

    if visualizeHitbox then
        local outline = HRP:FindFirstChild("HitboxOutline")
        if not outline then
            outline = Instance.new("BoxHandleAdornment")
            outline.Name = "HitboxOutline"
            outline.Adornee = HRP
            outline.Size = HRP.Size
            outline.Transparency = 0.8
            outline.ZIndex = 10
            outline.AlwaysOnTop = true
            outline.Color3 = hitboxColor
            outline.Parent = HRP

            local glow = Instance.new("BoxHandleAdornment")
            glow.Name = "HitboxGlow"
            glow.Adornee = HRP
            glow.Size = HRP.Size + Vector3.new(0.1, 0.1, 0.1)
            glow.Transparency = 0.9
            glow.ZIndex = 9
            glow.AlwaysOnTop = true
            glow.Color3 = hitboxColor
            glow.Parent = HRP
        else
            outline.Size = HRP.Size
            outline.Color3 = hitboxColor
            local glow = HRP:FindFirstChild("HitboxGlow")
            if glow then
                glow.Size = HRP.Size + Vector3.new(0.1, 0.1, 0.1)
                glow.Color3 = hitboxColor
            end
        end
    else
        removeVisuals(Character)
    end
end

local function handlePlayer(Player)
    if Player == LocalPlayer then return end
    Player.CharacterAdded:Connect(function(Character)
        Character:WaitForChild("HumanoidRootPart")
        handleCharacter(Character)
    end)
    if Player.Character then
        handleCharacter(Player.Character)
    end
end

for _, Player in pairs(Players:GetPlayers()) do
    handlePlayer(Player)
end

Players.PlayerAdded:Connect(handlePlayer)

RunService.Heartbeat:Connect(function()
    if not hitboxExpanderEnabled then
        for _, Player in pairs(Players:GetPlayers()) do
            if Player ~= LocalPlayer and Player.Character then
                resetCharacter(Player.Character)
            end
        end
        return
    end
    for _, Player in pairs(Players:GetPlayers()) do
        if Player ~= LocalPlayer and Player.Character then
            handleCharacter(Player.Character)
        end
    end
end)

-- Kill Aura
getgenv().range = 250
getgenv().whitelist = {}
getgenv().tracer = Instance.new("Part")
getgenv().tracer.Size = Vector3.new(0.2, 0.2, 0.2)
getgenv().tracer.Material = Enum.Material.Neon
getgenv().tracer.Color = Color3.new(1, 0, 0)
getgenv().tracer.Transparency = 1
getgenv().tracer.Anchored = true
getgenv().tracer.CanCollide = false
getgenv().tracer.Parent = workspace

getgenv().enabled = false
getgenv().active = false
getgenv().visualizeEnabled = false
getgenv().silentEnabled = false
getgenv().lastHealth = {}

KillAura:AddToggle('MainToggle', {
    Text = 'Kill Aura',
    Default = false,
    Callback = function(state)
        getgenv().enabled = state
        if not state then
            getgenv().active = false
            getgenv().tracer.Transparency = 1
            killAuraTracer.Visible = false
        end
    end
}):AddKeyPicker('Keybind', {
    Default = 'K',
    Text = 'kill aura',
    Mode = 'Toggle',
    Callback = function(state)
        if not getgenv().enabled or UserInputService:GetFocusedTextBox() then return end
        getgenv().active = state
    end
})

KillAura:AddSlider("Range", {
    Text = "Range",
    Default = 250,
    Min = 10,
    Max = 250,
    Rounding = 1,
    Callback = function(value)
        getgenv().range = value
    end
})

KillAura:AddToggle('Visualizer', {
    Text = 'Visualize',
    Default = false,
    Callback = function(state)
        getgenv().visualizeEnabled = state
    end
}):AddColorPicker('VisualizerColor', {
    Text = 'Visualizer Color',
    Default = Color3.new(1, 0, 0),
    Callback = function(value)
        getgenv().tracer.Color = value
        killAuraTracer.Color = value
    end
})

KillAura:AddToggle('Silent', {
    Text = 'Silent',
    Default = false,
    Callback = function(state)
        getgenv().silentEnabled = state
    end
})

KillAura:AddInput('wlb', {
    Default = '',
    Numeric = false,
    Finished = false,
    Text = 'Add/Remove Player',
    Tooltip = 'Type a name or display name to add/remove from whitelist',
    Placeholder = 'Player Name',
    Callback = function(input)
        for _, player in pairs(game.Players:GetPlayers()) do
            if player.Name == input or player.DisplayName == input then
                if getgenv().whitelist[player.Name] then
                    getgenv().whitelist[player.Name] = nil
                    Library:Notify(player.Name .. " removed from whitelist.", 2)
                else
                    getgenv().whitelist[player.Name] = true
                    Library:Notify(player.Name .. " added to whitelist.", 2)
                end
                return
            end
        end
        Library:Notify("Player not found.", 2)
    end,
    Autocomplete = function(input)
        local suggestions = {}
        for _, player in pairs(game.Players:GetPlayers()) do
            if string.find(string.lower(player.Name), string.lower(input)) or string.find(string.lower(player.DisplayName), string.lower(input)) then
                table.insert(suggestions, player.Name .. " (" .. player.DisplayName .. ")")
            end
        end
        return suggestions
    end
})

-- Hitsounds
GunMods:AddToggle('hstoggle', {
    Text = 'Hitsounds',
    Default = false,
    Callback = function(state)
        getgenv().hitsoundEnabled = state
    end
})

GunMods:AddDropdown('hs', {
    Text = 'Select Hitsound',
    Values = {"Bubble", "Lazer", "Pick", "Pop", "Rust", "Sans", "Fart", "Big", "Vine", "UwU", "Bruh", "Skeet", "Neverlose", "Fatality", "Bonk", "Minecraft", "Gamesense", "RIFK7", "Bamboo", "Crowbar", "Weeb", "Beep", "Bambi", "Stone", "Old Fatality", "Click", "Ding", "Snow", "Laser", "Mario", "Steve", "Call of Duty", "Bat", "TF2 Critical", "Saber", "Baimware", "Osu", "TF2", "Slime", "Among Us", "One"},
    Default = "Bubble",
    Callback = function(value)
        getgenv().selectedHitsound = value
    end
})

GunMods:AddSlider('hsvolume', {
    Text = 'Volume',
    Default = 1,
    Min = 1,
    Max = 5,
    Rounding = 2,
    Callback = function(value)
        getgenv().hitsoundVolume = value
    end
})

-- Anti Aim (Desync)
local desync_setback = Instance.new("Part")
desync_setback.Name = "Desync Setback"
desync_setback.Parent = workspace
desync_setback.Size = Vector3.new(2, 2, 1)
desync_setback.CanCollide = false
desync_setback.Anchored = true
desync_setback.Transparency = 1

local desync = {
    enabled = false,
    mode = "Void",
    teleportPosition = Vector3.new(0, 0, 0),
    old_position = nil,
    voidSpamActive = false,
    toggleEnabled = false
}

function resetCamera()
    if LocalPlayer.Character then
        local humanoid = LocalPlayer.Character:FindFirstChild("Humanoid")
        if humanoid then
            workspace.CurrentCamera.CameraSubject = humanoid
        end
    end
end

function toggleDesync(state)
    desync.enabled = state
    if desync.enabled then
        workspace.CurrentCamera.CameraSubject = desync_setback
        Library:Notify("Desync Enabled '" .. desync.mode .. "' Mad.lol $", 2)
    else
        resetCamera()
        Library:Notify("Desync Disabled '" .. desync.mode .. "' Mad.lol  $", 2)
    end
end

function setDesyncMode(mode)
    desync.mode = mode
end

local DesyncBox = Tabs.Main:AddRightGroupbox("Anti Aim")

DesyncBox:AddToggle('DesyncToggle', {
    Text = 'Anti Aim',
    Default = false,
    Callback = function(state)
        desync.toggleEnabled = state
        if not state then
            toggleDesync(false)
        end
    end,
}):AddKeyPicker('DesyncKeybind', {
    Default = 'V',
    Text = 'Desync',
    Mode = 'Toggle',
    Callback = function(state)
        if not desync.toggleEnabled or UserInputService:GetFocusedTextBox() then return end
        toggleDesync(not desync.enabled)
    end,
})

DesyncBox:AddDropdown('DesyncMethodDropdown', {
    Values = {"Destroy Cheaters", "Underground", "Void Spam", "Void"},
    Default = "Void",
    Multi = false,
    Text = 'Method',
    Callback = function(selected)
        setDesyncMode(selected)
    end
})

RunService.Heartbeat:Connect(function()
    if desync.enabled and LocalPlayer.Character then
        local rootPart = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
        if rootPart then
            desync.old_position = rootPart.CFrame

            if desync.mode == "Destroy Cheaters" then
                desync.teleportPosition = Vector3.new(11223344556677889900, 1, 1)

            elseif desync.mode == "Underground" then
                desync.teleportPosition = rootPart.Position - Vector3.new(0, 12, 0)

            elseif desync.mode == "Void Spam" then
                desync.teleportPosition = math.random(1, 2) == 1 and desync.old_position.Position or Vector3.new(
                    math.random(10000, 50000),
                    math.random(10000, 50000),
                    math.random(10000, 50000)
                )

            elseif desync.mode == "Void" then
                desync.teleportPosition = Vector3.new(
                    rootPart.Position.X + math.random(-444444, 444444),
                    rootPart.Position.Y + math.random(-444444, 444444),
                    rootPart.Position.Z + math.random(-44444, 44444)
                )
            end

            if desync.mode ~= "Rotation" then
                rootPart.CFrame = CFrame.new(desync.teleportPosition)
                workspace.CurrentCamera.CameraSubject = desync_setback

                RunService.RenderStepped:Wait()

                desync_setback.CFrame = desync.old_position * CFrame.new(0, rootPart.Size.Y / 2 + 0.5, 0)
                rootPart.CFrame = desync.old_position
            end
        end
    end
end)

-- UI Settings Tab
local MenuGroup = Tabs['UI Settings']:AddLeftGroupbox('Menu')

MenuGroup:AddButton('Unload', function() Library:Unload() end)
MenuGroup:AddLabel('Menu bind'):AddKeyPicker('MenuKeybind', { Default = 'End', NoUI = true, Text = 'Menu keybind' }) 

Library.ToggleKeybind = Options.MenuKeybind

ThemeManager:SetLibrary(Library)
SaveManager:SetLibrary(Library)

SaveManager:IgnoreThemeSettings() 
SaveManager:SetIgnoreIndexes({ 'MenuKeybind' }) 

ThemeManager:SetFolder('MyScriptHub')
SaveManager:SetFolder('MyScriptHub/specific-game')

SaveManager:BuildConfigSection(Tabs['UI Settings']) 
ThemeManager:ApplyToTab(Tabs['UI Settings'])

-- Main render loop
RunService.RenderStepped:Connect(function()
    if lockedTarget and lockedTarget.Character then
        local targetPart = lockedTarget.Character:FindFirstChild(targetHitPart)
        local bodyEffects = lockedTarget.Character:FindFirstChild("BodyEffects")
        local isKO = bodyEffects and bodyEffects:FindFirstChild("K.O") and bodyEffects["K.O"].Value
        local isGrabbed = lockedTarget.Character:FindFirstChild("GRABBING_CONSTRAINT")

        if ViewTargetEnabled then
            workspace.CurrentCamera.CameraSubject = lockedTarget.Character
        elseif spectateStrafeEnabled and strafeEnabled then
            workspace.CurrentCamera.CameraSubject = lockedTarget.Character:FindFirstChild("Head")
        end

        if strafeEnabled and targetPart and not isGrabbed then
            local targetRoot = lockedTarget.Character:FindFirstChild("HumanoidRootPart")
            local targetPosition = targetRoot.Position

            if predictMovementEnabled then
                targetPosition = predictPosition(targetRoot, PredicTvalue)
            end

            if strafeMode == "Orbit" then
                local angle = tick() * strafeSpeed
                local offset = Vector3.new(math.cos(angle) * strafeXOffset, -0.1, math.sin(angle) * strafeXOffset)
                LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(targetPosition + offset, targetPosition)
            elseif strafeMode == "Random" then
                local offset = Vector3.new(math.random(-20, 20), math.random(-10, 10), math.random(-20, 20))
                local randomrotation = CFrame.Angles(
                    math.rad(math.random(0, 360)),
                    math.rad(math.random(0, 360)),
                    math.rad(math.random(0, 360))
                )
                LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(targetPosition + offset) * randomrotation
            end
        end

        local humanoid = lockedTarget.Character:FindFirstChild("Humanoid")
        if humanoid then
            if not getgenv().lastHealth[lockedTarget.Name] then
                getgenv().lastHealth[lockedTarget.Name] = humanoid.Health
            end
            if humanoid.Health < getgenv().lastHealth[lockedTarget.Name] then
                playHitsound()
            end
            getgenv().lastHealth[lockedTarget.Name] = humanoid.Health
        end

        if TracerEnabled and targetPart then
            tracer.Visible = true
            local camera = workspace.CurrentCamera
            local targetScreenPos, onScreen = camera:WorldToViewportPoint(targetPart.Position)
            local endScreenPos

            if targetToMouseTracer then
                endScreenPos = UserInputService:GetMouseLocation()
            else
                local rootPart = LocalPlayer.Character and LocalPlayer
                                local rootPart = LocalPlayer.Character and LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
                if rootPart then
                    local rootScreenPos = camera:WorldToViewportPoint(rootPart.Position)
                    endScreenPos = Vector2.new(rootScreenPos.X, rootScreenPos.Y)
                else
                    endScreenPos = Vector2.new(targetScreenPos.X, targetScreenPos.Y)
                end
            end

            if onScreen then
                tracer.From = Vector2.new(targetScreenPos.X, targetScreenPos.Y)
                tracer.To = endScreenPos
            else
                tracer.Visible = false
            end
        else
            tracer.Visible = false
        end

        if StickyAimEnabled then
            local camera = workspace.CurrentCamera
            local targetPos = targetPart.Position
            if predictMovementEnabled then
                targetPos = predictPosition(lockedTarget.Character:FindFirstChild("HumanoidRootPart"), PredicTvalue)
            end
            camera.CFrame = CFrame.new(camera.CFrame.Position, targetPos)
        end

        if stompTargetEnabled and targetPart then
            local humanoid = LocalPlayer.Character:FindFirstChild("Humanoid")
            if humanoid then
                humanoid:ChangeState(Enum.HumanoidStateType.Jumping)
                LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(targetPart.Position + Vector3.new(0, 5, 0))
            end
        end
    else
        tracer.Visible = false
    end

    -- Kill Aura Logic
    if getgenv().enabled and getgenv().active and LocalPlayer.Character then
        local rootPart = LocalPlayer.Character:FindFirstChild("HumanoidRootPart")
        if rootPart then
            local closestPlayer, closestDistance = nil, getgenv().range

            for _, player in ipairs(Players:GetPlayers()) do
                if player ~= LocalPlayer and player.Character and not getgenv().whitelist[player.Name] then
                    local targetRoot = player.Character:FindFirstChild("HumanoidRootPart")
                    if targetRoot then
                        local distance = (rootPart.Position - targetRoot.Position).Magnitude
                        if distance < closestDistance then
                            closestPlayer = player
                            closestDistance = distance
                        end
                    end
                end
            end

            if closestPlayer and closestPlayer.Character then
                local targetRoot = closestPlayer.Character:FindFirstChild("HumanoidRootPart")
                if targetRoot then
                    if getgenv().visualizeEnabled then
                        getgenv().tracer.Transparency = 0.5
                        getgenv().tracer.CFrame = CFrame.new(targetRoot.Position)
                        killAuraTracer.Visible = true
                        killAuraTracer.From = Vector2.new(rootPart.Position.X, rootPart.Position.Y)
                        killAuraTracer.To = Vector2.new(targetRoot.Position.X, targetRoot.Position.Y)
                    else
                        getgenv().tracer.Transparency = 1
                        killAuraTracer.Visible = false
                    end

                    if not getgenv().silentEnabled then
                        LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(targetRoot.Position + Vector3.new(0, 3, 0))
                    end

                    -- Simulate punch
                    local tool = LocalPlayer.Character:FindFirstChildOfClass("Tool")
                    if tool then
                        tool:Activate()
                    end
                end
            else
                getgenv().tracer.Transparency = 1
                killAuraTracer.Visible = false
            end
        end
    end

    -- Auto Ammo Logic
    if AutoAmmoEnabled and LocalPlayer.Character then
        local backpack = LocalPlayer:FindFirstChild("Backpack")
        local character = LocalPlayer.Character
        local hasLowAmmo = false

        -- Check for low ammo
        for _, tool in ipairs(backpack:GetChildren()) do
            if tool:FindFirstChild("Ammo") and tool.Ammo.Value < 5 then
                hasLowAmmo = true
                break
            end
        end

        if hasLowAmmo then
            -- Save strafe state if needed
            if strafeEnabled then
                strafeWasEnabledBeforeAmmoBuy = true
                strafeEnabled = false
            end

            -- Teleport to ammo store (replace with actual coordinates)
            LocalPlayer.Character.HumanoidRootPart.CFrame = CFrame.new(100, 5, 100) -- Example coordinates

            -- Simulate buying ammo
            wait(1)
            fireclickdetector(game:GetService("Workspace").AmmoStore.ClickDetector)

            -- Restore strafe state
            if strafeWasEnabledBeforeAmmoBuy then
                strafeEnabled = true
                strafeWasEnabledBeforeAmmoBuy = false
            end
        end
    end

    -- Kill Say Logic
    if killSayEnabled then
        for _, player in ipairs(Players:GetPlayers()) do
            if player ~= LocalPlayer and player.Character then
                local humanoid = player.Character:FindFirstChild("Humanoid")
                if humanoid then
                    if not getgenv().lastHealth[player.Name] then
                        getgenv().lastHealth[player.Name] = humanoid.Health
                    end
                    
                    if humanoid.Health <= 0 and getgenv().lastHealth[player.Name] > 0 then
                        local message = killSayMessages[math.random(1, #killSayMessages)]
                        game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer(message, "All")
                    end
                    
                    getgenv().lastHealth[player.Name] = humanoid.Health
                end
            end
        end
    end
end)

-- Hidden Bullets Logic
local originalBulletTransparency
if hiddenBulletsEnabled then
    for _, v in next, getgc(true) do
        if type(v) == "table" and rawget(v, "shoot") then
            originalBulletTransparency = v.bullet
            v.bullet = function(...)
                local args = {...}
                args[2] = nil -- Remove bullet visual
                return originalBulletTransparency(unpack(args))
            end
        end
    end
elseif originalBulletTransparency then
    for _, v in next, getgc(true) do
        if type(v) == "table" and rawget(v, "shoot") then
            v.bullet = originalBulletTransparency
        end
    end
end

-- Cleanup on script unload
Library.OnUnload = function()
    if tracer then tracer:Remove() end
    if killAuraTracer then killAuraTracer:Remove() end
    if desync_setback then desync_setback:Destroy() end
    if getgenv().tracer then getgenv().tracer:Destroy() end
    
    -- Reset hitbox expander
    for _, Player in pairs(Players:GetPlayers()) do
        if Player ~= LocalPlayer and Player.Character then
            resetCharacter(Player.Character)
        end
    end
    
    -- Reset hidden bullets
    if originalBulletTransparency then
        for _, v in next, getgc(true) do
            if type(v) == "table" and rawget(v, "shoot") then
                v.bullet = originalBulletTransparency
            end
        end
    end
    
    -- Reset camera
    if LocalPlayer.Character then
        workspace.CurrentCamera.CameraSubject = LocalPlayer.Character:FindFirstChild("Humanoid")
    end
end

-- Notify loaded
Library:Notify("Loaded Mad.lol | Beta", 5)
